// <auto-generated />
using CasesService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CasesService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CasesService.Database.Models.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal?>("AccumulatedProfit")
                        .HasColumnType("numeric")
                        .HasColumnName("accumulated_profit");

                    b.Property<float>("Alpha")
                        .HasColumnType("real")
                        .HasColumnName("alpha");

                    b.Property<bool>("BonusNewUserEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("bonus_new_user_enabled");

                    b.Property<int>("BonusNewUserRolls")
                        .HasColumnType("integer")
                        .HasColumnName("bonus_new_user_rolls");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<int>("CurrentOpen")
                        .HasColumnType("integer")
                        .HasColumnName("current_open");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("old_price");

                    b.Property<int?>("OpenLimit")
                        .HasColumnType("integer")
                        .HasColumnName("open_limit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("case");
                });

            modelBuilder.Entity("CasesService.Database.Models.CaseCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormilizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CaseCategories");
                });

            modelBuilder.Entity("CasesService.Database.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal?>("BaseCost")
                        .HasColumnType("numeric")
                        .HasColumnName("base_cost");

                    b.Property<string>("Game")
                        .HasColumnType("text")
                        .HasColumnName("game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool>("IsAvailableForContract")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available_for_contract");

                    b.Property<bool>("IsAvailableForUpgrade")
                        .HasColumnType("boolean")
                        .HasColumnName("available_for_upgrade");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sell_price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("CasesService.Database.Models.ItemCase", b =>
                {
                    b.Property<string>("CaseId")
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<string>("ItemId")
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.HasKey("CaseId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("CaseId", "ItemId")
                        .IsUnique();

                    b.ToTable("item_case");
                });

            modelBuilder.Entity("CasesService.Database.Models.Multipliers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("NewPlayerCasesRollCount")
                        .HasColumnType("integer");

                    b.Property<int>("NewPlayerContractsCount")
                        .HasColumnType("integer");

                    b.Property<double>("NewPlayerMultiplier")
                        .HasColumnType("double precision");

                    b.Property<int>("NewPlayerUpgradesCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Multipliers");
                });

            modelBuilder.Entity("CasesService.Database.Models.Case", b =>
                {
                    b.HasOne("CasesService.Database.Models.CaseCategory", "CaseCategory")
                        .WithMany("Cases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CaseCategory");
                });

            modelBuilder.Entity("CasesService.Database.Models.ItemCase", b =>
                {
                    b.HasOne("CasesService.Database.Models.Case", "Case")
                        .WithMany("ItemsCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesService.Database.Models.Item", "Item")
                        .WithMany("ItemsCases")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CasesService.Database.Models.Case", b =>
                {
                    b.Navigation("ItemsCases");
                });

            modelBuilder.Entity("CasesService.Database.Models.CaseCategory", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CasesService.Database.Models.Item", b =>
                {
                    b.Navigation("ItemsCases");
                });
#pragma warning restore 612, 618
        }
    }
}
