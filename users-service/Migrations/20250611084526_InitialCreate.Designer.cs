// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UsersService.Models;

#nullable disable

namespace UsersService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611084526_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UsersService.Models.DbModels.BlockStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("isblocked");

                    b.Property<string>("PerformedById")
                        .HasColumnType("text")
                        .HasColumnName("performedbyid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("blockstatus");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.ContractHistoryRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfContract")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemsFromIds")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ResultItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("contracts_records");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.InventoryItemRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsItemActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_item_active");

                    b.Property<string>("ItemId")
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<int>("ItemRecordState")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("UserInventoryId")
                        .HasColumnType("text")
                        .HasColumnName("user_inventory_id");

                    b.HasKey("Id");

                    b.HasIndex("UserInventoryId");

                    b.ToTable("item_records_t");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.DailyBonus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Streak")
                        .HasColumnType("integer")
                        .HasColumnName("streak");

                    b.Property<DateTime>("TimeGotLastBonus")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_got_bonus");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("daily_bonuses");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.PrizeDraw", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DrawDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PrizeAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("prize_draws");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.PrizeDrawResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateDrawFinished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PrizeAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Winner")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Winner");

                    b.ToTable("prize_draw_results");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UpgradeHistoryRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfUpgrade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemResultId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemSpentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UpgradeHistoryRecord");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BlockStatusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ChanceBoost")
                        .HasColumnType("double precision")
                        .HasColumnName("chance_boost");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofregistration");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PriceDrawId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("UserInventoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserStatisticsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PriceDrawId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserInventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userinventory");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userrole");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserStatistics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("CasesBought")
                        .HasColumnType("integer")
                        .HasColumnName("casesbought");

                    b.Property<int>("ContractsPlaced")
                        .HasColumnType("integer")
                        .HasColumnName("contracts_placed");

                    b.Property<int>("CrashRocketsPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("crashrocketsplayed");

                    b.Property<int>("FailScore")
                        .HasColumnType("integer")
                        .HasColumnName("fail_score");

                    b.Property<int>("LuckBaraban")
                        .HasColumnType("integer")
                        .HasColumnName("luckbaraban");

                    b.Property<int>("OrdersPlaced")
                        .HasColumnType("integer")
                        .HasColumnName("ordersplaced");

                    b.Property<int>("PromocodesUsed")
                        .HasColumnType("integer")
                        .HasColumnName("promocodesused");

                    b.Property<decimal>("TotalCasesProfit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cases_profit");

                    b.Property<decimal>("TotalCasesSpent")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cases_spent");

                    b.Property<decimal>("TotalContractsProfit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_contracts_profit");

                    b.Property<decimal>("TotalContractsSpent")
                        .HasColumnType("numeric")
                        .HasColumnName("total_contracts_spent");

                    b.Property<int>("UpgradesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("upgrades_played");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userstatistics");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.BlockStatus", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithOne("BlockStatus")
                        .HasForeignKey("UsersService.Models.DbModels.BlockStatus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.ContractHistoryRecord", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithMany("ContractHistoryRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.InventoryItemRecord", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.UserInventory", "UserInventory")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("UserInventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserInventory");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.DailyBonus", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithOne("DailyBonus")
                        .HasForeignKey("UsersService.Models.DbModels.MinorBonuses.DailyBonus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.PrizeDrawResult", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "WinnerUser")
                        .WithMany("WonDraws")
                        .HasForeignKey("Winner")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("WinnerUser");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UpgradeHistoryRecord", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithMany("UpgradeHistoryRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.User", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.MinorBonuses.PrizeDraw", "CurrentPriceDraw")
                        .WithMany("Participants")
                        .HasForeignKey("PriceDrawId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentPriceDraw");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserInventory", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithOne("UserInventory")
                        .HasForeignKey("UsersService.Models.DbModels.UserInventory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserRole", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("UsersService.Models.DbModels.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserStatistics", b =>
                {
                    b.HasOne("UsersService.Models.DbModels.User", "User")
                        .WithOne("UserStatistics")
                        .HasForeignKey("UsersService.Models.DbModels.UserStatistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.MinorBonuses.PrizeDraw", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.User", b =>
                {
                    b.Navigation("BlockStatus");

                    b.Navigation("ContractHistoryRecords");

                    b.Navigation("DailyBonus")
                        .IsRequired();

                    b.Navigation("UpgradeHistoryRecords");

                    b.Navigation("UserInventory");

                    b.Navigation("UserRole");

                    b.Navigation("UserStatistics");

                    b.Navigation("WonDraws");
                });

            modelBuilder.Entity("UsersService.Models.DbModels.UserInventory", b =>
                {
                    b.Navigation("InventoryRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
