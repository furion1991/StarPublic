// <auto-generated />
using System;
using FinancialService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinancialService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.Bonus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BonusImage")
                        .HasColumnType("text")
                        .HasColumnName("bonus_image");

                    b.Property<int>("BonusType")
                        .HasColumnType("integer")
                        .HasColumnName("bonus_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DropChance")
                        .HasColumnType("numeric")
                        .HasColumnName("drop_chance");

                    b.Property<string>("ImageForDepositView")
                        .HasColumnType("text")
                        .HasColumnName("image_for_deposit_view");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("bonus_type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("bonus", null, t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator<int>("bonus_type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.UserBonusRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BonusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bonus_id");

                    b.Property<string>("FinDataId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fin_data_id");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<bool>("IsWheelBonus")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wheel_bonus");

                    b.Property<DateTime>("TimeGotBonus")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_got_bonus");

                    b.HasKey("Id");

                    b.HasIndex("BonusId");

                    b.HasIndex("FinDataId");

                    b.ToTable("users_bonuses", (string)null);
                });

            modelBuilder.Entity("FinancialService.Database.Models.FinancialData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("BonusBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("bonus_balance");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("current_balance");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("financial_data");
                });

            modelBuilder.Entity("FinancialService.Database.Models.PaymentOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("PaymentOrders");
                });

            modelBuilder.Entity("FinancialService.Database.Models.PaymentProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentProviders");
                });

            modelBuilder.Entity("FinancialService.Database.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_after");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_before");

                    b.Property<string>("FinancialDataId")
                        .HasColumnType("text")
                        .HasColumnName("financial_data_id");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDataId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.BalanceBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.CashbackBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<decimal>("CashbackPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("cashback_percentage");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.DepositBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<decimal>("BonusMultiplier")
                        .HasColumnType("numeric")
                        .HasColumnName("bonus_multiplier");

                    b.Property<decimal>("DepositCap")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_cap");

                    b.Property<int>("Mtype")
                        .HasColumnType("integer")
                        .HasColumnName("multiplier_type");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.DiscountBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<int>("CaseType")
                        .HasColumnType("integer")
                        .HasColumnName("case_bonus_type_discount");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percentage");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.FiveKBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.FreeCaseBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<int>("CaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("case_count");

                    b.Property<decimal>("MinimumDeposit")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_deposit");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.ItemBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<bool>("IsDepositDependent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deposit_dependent");

                    b.Property<int>("ItemCount")
                        .HasColumnType("integer")
                        .HasColumnName("item_count");

                    b.Property<decimal>("ItemMaximalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("item_max_cost");

                    b.Property<decimal>("ItemMinimalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("item_min_cost");

                    b.Property<decimal>("MinimumDeposit")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_deposit");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.LetterBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("letter");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.RandomCaseBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<decimal>("MinimumDeposit")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_deposit");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.WheelSpinBonus", b =>
                {
                    b.HasBaseType("FinancialService.Database.Models.Bonuses.Bonus");

                    b.Property<int>("ExtraSpins")
                        .HasColumnType("integer")
                        .HasColumnName("extra_spins");

                    b.ToTable("bonus", t =>
                        {
                            t.Property("bonus_type")
                                .HasColumnName("bonus_type1");
                        });

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("FinancialService.Database.Models.Bonuses.UserBonusRecord", b =>
                {
                    b.HasOne("FinancialService.Database.Models.Bonuses.Bonus", "Bonus")
                        .WithMany()
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialService.Database.Models.FinancialData", "FinancialData")
                        .WithMany("Bonuses")
                        .HasForeignKey("FinDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("FinancialData");
                });

            modelBuilder.Entity("FinancialService.Database.Models.PaymentOrder", b =>
                {
                    b.HasOne("FinancialService.Database.Models.Transaction", "Transaction")
                        .WithOne("PaymentOrder")
                        .HasForeignKey("FinancialService.Database.Models.PaymentOrder", "TransactionId");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FinancialService.Database.Models.Transaction", b =>
                {
                    b.HasOne("FinancialService.Database.Models.FinancialData", "FinancialData")
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialDataId");

                    b.Navigation("FinancialData");
                });

            modelBuilder.Entity("FinancialService.Database.Models.FinancialData", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FinancialService.Database.Models.Transaction", b =>
                {
                    b.Navigation("PaymentOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
