// <auto-generated />
using System;
using AuditService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuditService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611084410_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuditService.Database.Models.BaseLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfLog")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_log");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("PerformedById")
                        .HasColumnType("text")
                        .HasColumnName("performed_by_id");

                    b.HasKey("Id");

                    b.ToTable("base_log");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AuditService.Database.Models.DailyServerStatistics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("CasesOpened")
                        .HasColumnType("integer")
                        .HasColumnName("cases_opened");

                    b.Property<decimal>("DepositsToday")
                        .HasColumnType("numeric")
                        .HasColumnName("deposits_today");

                    b.Property<DateTime>("StatisticsDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("statistics_date");

                    b.HasKey("Id");

                    b.ToTable("daily_server_stats");
                });

            modelBuilder.Entity("AuditService.Database.Models.OpenedCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("item_cost");

                    b.Property<string>("ItemDroppedId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_dropped_id");

                    b.Property<DateTime>("OpenedTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_opened");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_opened_id");

                    b.HasKey("Id");

                    b.ToTable("opened_cases");
                });

            modelBuilder.Entity("AuditService.Database.Models.CaseLog", b =>
                {
                    b.HasBaseType("AuditService.Database.Models.BaseLog");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseLogType")
                        .HasColumnType("integer")
                        .HasColumnName("case_log_type");

                    b.ToTable("case_log");
                });

            modelBuilder.Entity("AuditService.Database.Models.FinancialLog", b =>
                {
                    b.HasBaseType("AuditService.Database.Models.BaseLog");

                    b.Property<int>("FinancialLogType")
                        .HasColumnType("integer")
                        .HasColumnName("financial_log_type");

                    b.Property<string>("FinancialRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("financial_record_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable("financial_log");
                });

            modelBuilder.Entity("AuditService.Database.Models.ItemLog", b =>
                {
                    b.HasBaseType("AuditService.Database.Models.BaseLog");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<int>("ItemLogType")
                        .HasColumnType("integer")
                        .HasColumnName("item_log_type");

                    b.ToTable("item_log");
                });

            modelBuilder.Entity("AuditService.Database.Models.UserLog", b =>
                {
                    b.HasBaseType("AuditService.Database.Models.BaseLog");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("UserLogType")
                        .HasColumnType("integer")
                        .HasColumnName("user_log_type");

                    b.ToTable("user_log");
                });

            modelBuilder.Entity("AuditService.Database.Models.CaseLog", b =>
                {
                    b.HasOne("AuditService.Database.Models.BaseLog", null)
                        .WithOne()
                        .HasForeignKey("AuditService.Database.Models.CaseLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuditService.Database.Models.FinancialLog", b =>
                {
                    b.HasOne("AuditService.Database.Models.BaseLog", null)
                        .WithOne()
                        .HasForeignKey("AuditService.Database.Models.FinancialLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuditService.Database.Models.ItemLog", b =>
                {
                    b.HasOne("AuditService.Database.Models.BaseLog", null)
                        .WithOne()
                        .HasForeignKey("AuditService.Database.Models.ItemLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuditService.Database.Models.UserLog", b =>
                {
                    b.HasOne("AuditService.Database.Models.BaseLog", null)
                        .WithOne()
                        .HasForeignKey("AuditService.Database.Models.UserLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
